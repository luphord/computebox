#! /usr/bin/env python3

import doit
from pprint import pprint as print
import subprocess
import json
import urllib.request
from pathlib import Path
from dataclasses import dataclass

DOIT_CONFIG = {"default_tasks": ["computebox_info"], "verbosity": 2}
GIT_USER = "luphord"
REPOS_BASE_PATH = Path.home() / "repos"


@dataclass
class RepoInfo:
    name: Path
    clone_url: Path


def _get_repo_list():
    """Retrieve repo list from Github API."""
    with urllib.request.urlopen(f"https://api.github.com/users/{GIT_USER}/repos") as f:
        repos = json.loads((f.read().decode("utf-8")))
        for repo in repos:
            if not repo["fork"]:
                yield RepoInfo(name=repo["name"], clone_url=repo["clone_url"])


def _print_computebox_info():
    print({"computebox script": Path(__file__)})
    print({"repos": list(_get_repo_list())})


def task_computebox_info():
    """Print infos about this computebox install"""
    return {"actions": [_print_computebox_info]}


def task_clone():
    """Clone all repos from Github."""
    return {
        "actions": [
            f"cd {REPOS_BASE_PATH} && test -d {repo.name} || git clone {repo.clone_url}"
            for repo in _get_repo_list()
        ]
    }


def task_pull():
    """Pull all repos from Github."""
    return {
        "actions": [
            f"cd {repo_path} && git pull" for repo_path in REPOS_BASE_PATH.iterdir()
        ],
        "task_dep": ["clone"],
    }


if __name__ == "__main__":
    doit.run(globals())
